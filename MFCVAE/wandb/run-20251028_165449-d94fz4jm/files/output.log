Initialize Shapes dataset and data loaders...
[  0.   1.   2.   3.   4.   5.   6.   7.   8.   9.  10.  11.  12.  13.
  14.  15.  16.  17.  18.  19.  20.  21.  22.  23.  24.  25.  26.  27.
  28.  29.  30.  31.  32.  33.  34.  35.  36.  37.  38.  39.  40.  41.
  42.  43.  44.  45.  46.  47.  48.  49.  50.  51.  52.  53.  54.  55.
  56.  57.  58.  59.  60.  61.  62.  63.  64.  65.  66.  67.  68.  69.
  70.  71.  72.  73.  74.  75.  76.  77.  78.  79.  80.  81.  82.  83.
  84.  85.  86.  87.  88.  89.  90.  91.  92.  93.  94.  95.  96.  97.
  98.  99. 100. 101. 102. 103. 104. 105. 106. 107. 108. 109. 110. 111.
 112. 113. 114. 115. 116. 117. 118. 119. 120. 121. 122. 123. 124. 125.
 126. 127. 128. 129. 130. 131. 132. 133. 134. 135. 136. 137. 138. 139.
 140. 141. 142. 143. 144. 145. 146. 147. 148. 149. 150. 151. 152. 153.
 154. 155. 156. 157. 158. 159. 160. 161. 162. 163. 164. 165. 166. 167.
 168. 169. 170. 171. 172. 173. 174. 175. 176. 177. 178. 179. 180. 181.
 182. 183. 184. 185. 186. 187. 188. 189. 190. 191. 192. 193. 194. 195.
 196. 197. 198. 199. 200. 201. 202. 203. 204. 205. 206. 207. 208. 209.
 210. 211. 212. 213. 214. 215. 216. 217. 218. 219. 220. 221. 222. 223.
 224. 225. 226. 227. 228. 229. 230. 231. 232. 233. 234. 235. 236. 237.
 238. 239. 240. 241. 242. 243. 244. 245. 246. 247. 248. 249. 250. 251.
 252. 253. 254. 255.]
[0. 1.]
[  0.   1.   2.   3.   4.   5.   6.   7.   8.   9.  10.  11.  12.  13.
  14.  15.  16.  17.  18.  19.  20.  21.  22.  23.  24.  25.  26.  27.
  28.  29.  30.  31.  32.  33.  34.  35.  36.  37.  38.  39.  40.  41.
  42.  43.  44.  45.  46.  47.  48.  49.  50.  51.  52.  53.  54.  55.
  56.  57.  58.  59.  60.  61.  62.  63.  64.  65.  66.  67.  68.  69.
  70.  71.  72.  73.  74.  75.  76.  77.  78.  79.  80.  81.  82.  83.
  84.  85.  86.  87.  88.  89.  90.  91.  92.  93.  94.  95.  96.  97.
  98.  99. 100. 101. 102. 103. 104. 105. 106. 107. 108. 109. 110. 111.
 112. 113. 114. 115. 116. 117. 118. 119. 120. 121. 122. 123. 124. 125.
 126. 127. 128. 129. 130. 131. 132. 133. 134. 135. 136. 137. 138. 139.
 140. 141. 142. 143. 144. 145. 146. 147. 148. 149. 150. 151. 152. 153.
 154. 155. 156. 157. 158. 159. 160. 161. 162. 163. 164. 165. 166. 167.
 168. 169. 170. 171. 172. 173. 174. 175. 176. 177. 178. 179. 180. 181.
 182. 183. 184. 185. 186. 187. 188. 189. 190. 191. 192. 193. 194. 195.
 196. 197. 198. 199. 200. 201. 202. 203. 204. 205. 206. 207. 208. 209.
 210. 211. 212. 213. 214. 215. 216. 217. 218. 219. 220. 221. 222. 223.
 224. 225. 226. 227. 228. 229. 230. 231. 232. 233. 234. 235. 236. 237.
 238. 239. 240. 241. 242. 243. 244. 245. 246. 247. 248. 249. 250. 251.
 252. 253. 254. 255.]
[0. 1.]
Make model object...
Initialize model randomly (from scratch)...
Initialize all p(z_j | c_j) with GMM...
[tensor([[ 0.0277,  0.0366,  0.0060, -0.0511,  0.0138],
        [ 0.0270,  0.0184, -0.0171, -0.0587,  0.0047],
        [ 0.0268,  0.0448, -0.0009, -0.0502,  0.0102],
        ...,
        [ 0.0233,  0.0418, -0.0166, -0.0468,  0.0378],
        [ 0.0171,  0.0316, -0.0187, -0.0426,  0.0113],
        [ 0.0274,  0.0546, -0.0218, -0.0622,  0.0099]],
       grad_fn=<AddmmBackward0>), tensor([[ 0.0005,  0.0175,  0.0192, -0.0065, -0.0229],
        [ 0.0018,  0.0237,  0.0165, -0.0053, -0.0232],
        [ 0.0006,  0.0134,  0.0152, -0.0126, -0.0145],
        ...,
        [-0.0049,  0.0179,  0.0255,  0.0047, -0.0258],
        [ 0.0034,  0.0192,  0.0174, -0.0127, -0.0149],
        [-0.0003,  0.0154,  0.0208, -0.0115, -0.0242]],
       grad_fn=<AddmmBackward0>)]
Traceback (most recent call last):
  File "train_mnsit.py", line 1131, in <module>
    train(beta_z, beta_c)
  File "train_mnsit.py", line 493, in train
    mfcvae.initialize_p_z_c_params_with_gmm(train_loader, model_type=args.model_type, epoch=-1, batch_idx=-1)  # epoch and batch_idx are not used here
  File "/home/wessim/PHD/Clustering(SophIA)/MFCVAE/mfcvae.py", line 527, in initialize_p_z_c_params_with_gmm
    _x_hat, _q_z_j_x_list, z_sample_q_z_j_x_list = self.forward(x, epoch, batch_idx)
  File "/home/wessim/PHD/Clustering(SophIA)/MFCVAE/mfcvae.py", line 234, in forward
    scale = torch.sqrt(torch.exp(log_sigma_square_q_z_j_x_list) + 1e-8)
TypeError: exp(): argument 'input' (position 1) must be Tensor, not list
